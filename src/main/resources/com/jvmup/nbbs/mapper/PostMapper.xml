<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jvmup.nbbs.dao.PostDao">
    <resultMap id="postResult" type="post" autoMapping="true">
        <id column="id" property="id"/>
        <result column="create_time" property="createTime"/>
        <result column="brief" property="brief"/>
        <result column="title" property="title"/>
        <result column="view" property="view"/>
        <result column="comment_num" property="commentNum"/>
        <result column="type" property="type"/>
        <result column="topping" property="topping"/>
        <association property="section" javaType="section">
            <id column="section_id" property="id"/>
            <result column="section_title" property="title"/>
            <association property="partition" javaType="partition">
                <id column="section_partition_id" property="id"/>
            </association>
        </association>
        <association property="user" resultMap="userResult"/>
        <collection property="likeList" ofType="user" resultMap="userResult" columnPrefix="like_" >
        </collection>
        <collection property="collectionList" ofType="user" resultMap="userResult" columnPrefix="collection_">
        </collection>
    </resultMap>
    <resultMap id="userResult" type="user">
        <result property="nickname" column="nickname"/>
        <result property="ex" column="ex"/>
        <result property="createTime" column="user_create_time"/>
        <result property="avatar" column="avatar"/>
    </resultMap>
    <!--高子彭 18717 1135-->
    <select id="getPost" resultMap="postResult">
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time ,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        where p.section_id=#{sectionId} <if test="type==0">
        order by p.create_time desc
        </if>
        <if test="type==2">
            order by p.last_modify desc
        </if>
        <if test="type==3">
            order by  p.view +p.comment_num*3 desc
        </if>
    </select>
    <select id="getHotPost" resultMap="postResult">
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        order by p.comment_num*3+p.view desc limit 5;
    </select>
    <select id="getPostByPostId" resultMap="postResult">
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname,
        bbs_partition.id as section_partition_id
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        left join bbs_partition on bbs_partition.id = section.partition_id
        where p.id=#{id}
    </select>
    <delete id="deletePost">
        delete from post where post.id=#{id}
    </delete>
    <insert id="addPost">
        insert into post (title,content,user_id,topping,section_id) value (#{title},#{content},#{user.id},#{topping},#{section.id})
    </insert>
    <update id="toppingPost">
        update  post set topping=#{toppingType} where id=#{id}
    </update>
    <update id="changeType">
        update  post set section_id=#{sectionId} where post.id=#{postId}
    </update>
    <insert id="praise">
        insert into user_like(user_id, post_id) value (#{userId},#{postId})
    </insert>
    <select id="getPostByAuthId" resultMap="postResult" >
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time ,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        where p.user_id=#{id}
    </select>
    <select id="getCollectionCnt" resultType="int" >
        select count(user_id) from user_collection group by post_id having post_id=#{postId}
    </select>
    <insert id="collect">
        insert into user_collection (user_id, post_id) value (#{userId},#{postId})
    </insert>
    <select id="getPraiseCnt" resultType="int">
        select count(user_id) from user_like group by post_id having post_id=#{id};
    </select>
    <insert id="Report">
        insert into user_report (user_id, post_id, reason) values (#{userId},#{postId},#{reason});
    </insert>
    <select id="getTopPostBySection">
        select select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time ,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        where p.topping ==1 and p.section_id =#{sectionId}
    </select>
    <select id="getBrief" resultType="string">
        select brief from post where post.id=id;
    </select>
    <select id="incView">
      update post set view =view+1  where id =#{id} ;
    </select>
    <select id="getToppingPost" resultMap="postResult">
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time ,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
        where p.topping =2
    </select>
    <select id="getUserIdByPostId" resultType="Integer">
        select user_id from post where post.id=#{postId}
    </select>
    <delete id="cancelCollection">
        delete from user_collection where user_id=#{userId} and post_id=#{postId}
    </delete>
    <delete id="cancelPraise">
        delete from user_like where user_id =#{userId} and post_id=#{postId}
    </delete>
    <select id="getAllPost" resultMap="postResult">
        select p.id,p.create_time,p.brief,p.title,p.view,p.comment_num,p.type,p.topping,
        section.id as section_id ,section.title as section_title,
        user.nickname,user.ex ,user.create_time as user_create_time ,user.avatar,
        u1.nickname as collection_nickname,u2.nickname as like_nickname
        from post p
        left join section on section.id=p.section_id
        left join user on user.id = user_id
        left join user_collection on p.id = user_collection.post_id
        left join user u1 on user_collection.user_id=u1.id
        left join user_like on user_like.post_id=p.id
        left join user u2 on u2.id = user_like.user_id
    </select>
    <update id="changePostType">
        update post set type = #{type} where id =#{id};
    </update>

</mapper>
